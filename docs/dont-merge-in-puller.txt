
ragger.colour() now returns much more info in the json.
Why not use the same idea in runner...
runner would always return its version of red_amber_green.rb
This is ___much___ better.
It's naturally up to date.
If you expose the lambda source in the browser then
it can be compared with the master from runner (which will be sent from web)
  if its the same
    do eval/call locally.
  else
    create a runner.run_cyber_dojo_sh job
    see use-runner.txt
    ?Do I want a separate runner API call for this special use?
    This call does not need to return a copy of red_amber_green.rb for example.
  end

There is no need to use a concurrent map. Simples.

There is a security risk here.
Suppose I could edit red_amber_green.rb inside my cyber-dojo.sh file.
This would trick the ragger into evaling and calling it outside of a
secure runner container.
So runner needs strong testing that the red_amber_green.rb file cannot
be edited in any way.

Ok. So now puller becomes a properly separate service.
It has a dependency on CSP and LSP which is fine.
It does a docker pull every 24 hours. Job done!
An updated image will be ready for any runner.run_cyber_dojo_sh call.
So, when runner.run_cyber_dojo_sh runs it must returns an out-of-band
copy of red_amber_green.rb

Ensure ragger goes back to using rack-base as its FROM image.

Ensure ragger http_json/requester is brought up to date with the way
creator does it, with http_adapter.

At the moment the puller build script uses /tmp/cyber-dojo
if it detects the run is on CI. Otherwise it assumes
to use ${ROOT_DIR}/../commander/cyber-dojo
A better approach (which should be used in all the repos) is...

if ${ROOT_DIR}/../commander/cyber-dojo exists
  use it
else if /tmp/cyber-dojo exists
  use it
else
  curl cyber-dojo into /tmp/cyber-dojo
  use it
fi

ragger.sha
ragger.alive?
ragger.ready?
ragger.colour(image_name, stdout, stderr, status)
