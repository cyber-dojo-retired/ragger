
traffic_light.colour: make this also return [stdout,stderr,status]
  I'd like to expose these when I expose the rag-lambda source file
  in the browser.

To prepare for that I can replace the eval() with a call to runner.
It will need its own specific harness files.

Eg, (python_pytest)
lambda { |stdout,stderr,status|
  output = stdout + stderr
  return :red   if /=== FAILURES ===/.match(output)
  return :green if /=== (\d+) passed/.match(output)
  return :amber
}

@cache[image_name] ||= get_rag_lambda_src(image_name, id)
ruby = 'cyberdojofoundation/ruby'
files = {
  "cyber-dojo.sh" => intact("ruby ./traffic_light.rb"),
  "lambda.rb" => intact(@cache[image_name]),
  "stdout" => intact(stdout),
  "stderr" => intact(stderr),
  "status" => intact(status),
  "traffic_light.rb" => intact(
    <<~RUBY
    rag = eval(IO.read('lambda.rb'))
    stdout = IO.read('stdout')
    stderr = IO.read('stderr')
    status = IO.read('status')
    print rag.call(stdout, stderr, status)
    RUBY
  )
}
max_seconds = 5
result = runner.run_cyber_dojo_sh(ruby, id, files, max_seconds)
rgb = result['stdout']['content'].strip
rgb =~ /^red|amber|green$/ ? rgb : 'amber'


def get_rag_lambda_src(image_name, id)
  files = { 'cyber-dojo.sh' => intact('cat /usr/local/bin/red_amber_green.rb') }
  max_seconds = 5
  result = runner.run_cyber_dojo_sh(image_name, id, files, max_seconds)
  result['stdout']['content']
end

Now light['stdout'], light['stderr'], light['status']
can all be exposed in the browser.

An issue with this is that doing the runner.run is a lot slower
than doing the eval. But, I think I can get the both of best worlds.
The red_amber_green.rb source can be editable in the browser.
Initially this will come from the image or the start-point.
When the ragger is sent red_amber_green.rb it can compare it against
the original. If it has not changed it can use the already eval'd
function, which is ready to go. If it has changed, it can send it
to the runner.

- - - - - - - - - - - - - - - - - - - - - - - - - -

Note, dropping sss from main kata [test] page
and showing sss when in [resume] mode
means [test] page could actually have files
called stdout,stderr,status if it wished!!!
